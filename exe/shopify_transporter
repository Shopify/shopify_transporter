#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift("#{__dir__}/../lib")

require 'thor'
require 'thor/group'
require 'shopify_transporter'
require 'yaml'
require 'io/console'
require 'active_support/core_ext/string'

module ShopifyTransporter
  class CLI < Thor
    def self.exit_on_failure?
      true
    end

    method_option :config, type: :string, default: 'config.yml',
      desc: 'The config file that lists the conversions to run.'
    method_option :object, type: :string, required: true,
      desc: 'The object type (customer, product, or order) to convert.',
      enum: %w(customer product order)

    desc 'convert FILE_NAMES', 'Converts objects into a Shopify-format. (accepts a list of space-separated files).'
    def convert(*files)
      conversion_error('Missing file name at the end of the command.') if files.empty?
      migration_tool = TransporterTool.new(*files, options[:config], options[:object])
      migration_tool.run
    rescue TransporterTool::ConversionError => error
      conversion_error(error.message)
    end

    method_option :config, type: :string, default: 'config.yml',
      desc: 'The config file that describes the third party platform to extract from.'
    method_option :object, type: :string, required: true,
      desc: 'The object type (customer, product, or order) to extract.',
      enum: %w(customer product order)
    method_option :first_id, type: :numeric, required: true,
      desc: 'The first product_id, customer_id, or order_id for the range of objects you are trying to export.'
    method_option :last_id, type: :numeric, required: true,
      desc: 'The last product_id, customer_id, or order_id (inclusive) for the range of objects you are trying' \
        ' to export.'
    method_option :batch_size, type: :numeric, default: 1000,
      desc: 'The number of records that are retrieved from the source platform at one time. ' \
        'Use a smaller batch size if you are running into performance issues extracting your data.'

    desc 'extract', 'Extracts objects from a third-party platform into a format compatible for conversion.'
    def extract
      batch_config = options.slice('first_id', 'last_id', 'batch_size')
      exporter = Exporters::Exporter.new(options[:config], options[:object], batch_config)
      exporter.run
    rescue Exporters::ExportError => error
      extract_error(error.message)
    end

    no_commands do
      def conversion_error(message)
        say("Conversion error: #{message}", :red)
        exit 1
      end

      def extract_error(message)
        say("Extract error: #{message}", :red)
        exit 1
      end
    end

    register ShopifyTransporter::New,
      'new', 'new PROJECTNAME --platform=PLATFORM', 'Generate a project for the platform'

    register ShopifyTransporter::Generate,
      'generate', 'generate STAGE_NAME --object=OBJECT',
      'Generate a custom pipeline stage for the object'
  end
end

ShopifyTransporter::CLI.start(ARGV)
